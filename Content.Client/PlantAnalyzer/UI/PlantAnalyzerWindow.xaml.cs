//using System.Text;
//using Content.Client.Message;
using Content.Shared.PlantAnalyzer;
//using Content.Shared.Botany;
//using Content.Shared.Temperature;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Client.GameObjects;
using Robust.Client.ResourceManagement;
//using Content.Shared.IdentityManagement;

namespace Content.Client.PlantAnalyzer.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class PlantAnalyzerWindow : DefaultWindow
    {
        private readonly IEntityManager _entityManager;
        private readonly SpriteSystem _spriteSystem;
        private readonly IPrototypeManager _prototypes;
        private readonly IResourceCache _cache;

        public PlantAnalyzerWindow()
        {
            RobustXamlLoader.Load(this);

            var dependencies = IoCManager.Instance!;
            _entityManager = dependencies.Resolve<IEntityManager>();
            _spriteSystem = _entityManager.System<SpriteSystem>();
            _prototypes = dependencies.Resolve<IPrototypeManager>();
            _cache = dependencies.Resolve<IResourceCache>();
        }
        public void Populate(PlantAnalyzerScannedSeedPlantInformation msg)
        {
            var target = _entityManager.GetEntity(msg.TargetEntity);
            Boolean plantTray = msg.IsTray;

            if (target == null)
            {
                NoData.Visible = true;
                return;
            }
            NoData.Visible = false;

            Title = Loc.GetString("plant-analyzer-interface-title");

            if (plantTray)
            {
                PlantName.Text = Loc.GetString("plant-analyzer-window-label-name-scanned-plant", ("seedName", msg.SeedName));
            }
            else
            {
                PlantName.Text = Loc.GetString("plant-analyzer-window-label-name-scanned-seed", ("seedName", msg.SeedName));
            }

            Yield.Text = Loc.GetString("plant-analyzer-plant-yield-text", ("seedYield", msg.SeedYield));

            Potency.Text = Loc.GetString("plant-analyzer-plant-potency-text", ("seedPotency", msg.SeedPotency));

            Repeat.Text = Loc.GetString("plant-analyzer-plant-harvest-text", ("plantHarvestType", msg.Repeat));

            Chemicals.Text = Loc.GetString("plant-analyzer-plant-chemistry-text", ("seedChem", msg.SeedChem));

            Gases.Text = Loc.GetString("plant-analyzer-plant-exude-text", ("exudeGases", msg.ExudeGases));

            Traits.Text = Loc.GetString("plant-analyzer-plant-mutations-text", ("traits", msg.SeedMutations));
        }
    }
}
